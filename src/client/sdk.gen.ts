// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from "./client";
import type {
  AuthCurrentUserData,
  AuthCurrentUserResponse3,
  AuthCurrentUserError,
  AuthLoginData,
  AuthLoginResponse3,
  AuthLoginError,
  AuthLogoutData,
  AuthLogoutResponse2,
  AuthResendOtpData,
  AuthResendOtpResponse3,
  AuthResendOtpError,
  AuthVerifyOtpData,
  AuthVerifyOtpResponse3,
  AuthVerifyOtpError,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export class Authentication {
  /**
   * Fetch current user information
   */
  public static authCurrentUser<ThrowOnError extends boolean = false>(
    options?: Options<AuthCurrentUserData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      AuthCurrentUserResponse3,
      AuthCurrentUserError,
      ThrowOnError
    >({
      security: [
        {
          in: "cookie",
          name: "sessionid",
          type: "apiKey",
        },
        {
          scheme: "basic",
          type: "http",
        },
      ],
      url: "/api/auth/current_user",
      ...options,
    });
  }

  /**
   * User login
   */
  public static authLogin<ThrowOnError extends boolean = false>(
    options?: Options<AuthLoginData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).post<
      AuthLoginResponse3,
      AuthLoginError,
      ThrowOnError
    >({
      security: [
        {
          in: "cookie",
          name: "sessionid",
          type: "apiKey",
        },
        {
          scheme: "basic",
          type: "http",
        },
      ],
      url: "/api/auth/login",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }

  /**
   * User logout
   */
  public static authLogout<ThrowOnError extends boolean = false>(
    options?: Options<AuthLogoutData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).delete<
      AuthLogoutResponse2,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          in: "cookie",
          name: "sessionid",
          type: "apiKey",
        },
        {
          scheme: "basic",
          type: "http",
        },
      ],
      url: "/api/auth/logout",
      ...options,
    });
  }

  /**
   * Resend OTP to the user
   */
  public static authResendOtp<ThrowOnError extends boolean = false>(
    options: Options<AuthResendOtpData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      AuthResendOtpResponse3,
      AuthResendOtpError,
      ThrowOnError
    >({
      security: [
        {
          in: "cookie",
          name: "sessionid",
          type: "apiKey",
        },
        {
          scheme: "basic",
          type: "http",
        },
      ],
      url: "/api/auth/resend_otp",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }

  /**
   * Send OTP to the user
   */
  public static authVerifyOtp<ThrowOnError extends boolean = false>(
    options: Options<AuthVerifyOtpData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      AuthVerifyOtpResponse3,
      AuthVerifyOtpError,
      ThrowOnError
    >({
      security: [
        {
          in: "cookie",
          name: "sessionid",
          type: "apiKey",
        },
        {
          scheme: "basic",
          type: "http",
        },
      ],
      url: "/api/auth/verify_otp",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }
}
