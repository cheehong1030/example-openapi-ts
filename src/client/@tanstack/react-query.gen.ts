// This file is auto-generated by @hey-api/openapi-ts

import { type Options, Authentication } from "../sdk.gen";
import {
  queryOptions,
  type UseMutationOptions,
  type DefaultError,
} from "@tanstack/react-query";
import type {
  AuthCurrentUserData,
  AuthLoginData,
  AuthLoginError,
  AuthLoginResponse3,
  AuthLogoutData,
  AuthLogoutResponse2,
  AuthResendOtpData,
  AuthResendOtpError,
  AuthResendOtpResponse3,
  AuthVerifyOtpData,
  AuthVerifyOtpError,
  AuthVerifyOtpResponse3,
} from "../types.gen";
import type { AxiosError } from "axios";
import { client as _heyApiClient } from "../client.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseURL" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  }
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseURL: (options?.client ?? _heyApiClient).getConfig().baseURL,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const authCurrentUserQueryKey = (
  options?: Options<AuthCurrentUserData>
) => createQueryKey("authCurrentUser", options);

export const authCurrentUserOptions = (
  options?: Options<AuthCurrentUserData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await Authentication.authCurrentUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authCurrentUserQueryKey(options),
  });
};

export const authLoginQueryKey = (options?: Options<AuthLoginData>) =>
  createQueryKey("authLogin", options);

export const authLoginOptions = (options?: Options<AuthLoginData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await Authentication.authLogin({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authLoginQueryKey(options),
  });
};

export const authLoginMutation = (
  options?: Partial<Options<AuthLoginData>>
): UseMutationOptions<
  AuthLoginResponse3,
  AxiosError<AuthLoginError>,
  Options<AuthLoginData>
> => {
  const mutationOptions: UseMutationOptions<
    AuthLoginResponse3,
    AxiosError<AuthLoginError>,
    Options<AuthLoginData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await Authentication.authLogin({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const authLogoutMutation = (
  options?: Partial<Options<AuthLogoutData>>
): UseMutationOptions<
  AuthLogoutResponse2,
  AxiosError<DefaultError>,
  Options<AuthLogoutData>
> => {
  const mutationOptions: UseMutationOptions<
    AuthLogoutResponse2,
    AxiosError<DefaultError>,
    Options<AuthLogoutData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await Authentication.authLogout({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const authResendOtpQueryKey = (options: Options<AuthResendOtpData>) =>
  createQueryKey("authResendOtp", options);

export const authResendOtpOptions = (options: Options<AuthResendOtpData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await Authentication.authResendOtp({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authResendOtpQueryKey(options),
  });
};

export const authResendOtpMutation = (
  options?: Partial<Options<AuthResendOtpData>>
): UseMutationOptions<
  AuthResendOtpResponse3,
  AxiosError<AuthResendOtpError>,
  Options<AuthResendOtpData>
> => {
  const mutationOptions: UseMutationOptions<
    AuthResendOtpResponse3,
    AxiosError<AuthResendOtpError>,
    Options<AuthResendOtpData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await Authentication.authResendOtp({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const authVerifyOtpQueryKey = (options: Options<AuthVerifyOtpData>) =>
  createQueryKey("authVerifyOtp", options);

export const authVerifyOtpOptions = (options: Options<AuthVerifyOtpData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await Authentication.authVerifyOtp({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authVerifyOtpQueryKey(options),
  });
};

export const authVerifyOtpMutation = (
  options?: Partial<Options<AuthVerifyOtpData>>
): UseMutationOptions<
  AuthVerifyOtpResponse3,
  AxiosError<AuthVerifyOtpError>,
  Options<AuthVerifyOtpData>
> => {
  const mutationOptions: UseMutationOptions<
    AuthVerifyOtpResponse3,
    AxiosError<AuthVerifyOtpError>,
    Options<AuthVerifyOtpData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await Authentication.authVerifyOtp({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
